@namespace Sandtype.UI.Text
@attribute [StyleSheet( "TypingView.razor.scss" )]
@using System
@using System.Collections.Generic
@using Sandbox.UI
@using Sandtype.Test
@using Sandtype.UI.Theme
@inherits Sandbox.UI.Panel

<!-- God this whole ass file is a mess, please excuse it :pray: -->
<root style="background-color: @Theme.ColorBackground;">
	<TextInput @ontab="@(HandleTab)"
	           @onspace="@(HandleSpace)"
	           @onchanged="@(HandleChanged)"
	           @ref="Input"
	           class="text-input"
	           style="z-index: 3; color: transparent;"/>
	<div class="text-container">
		<div class="text-line">
			@{
				if ( TargetWords == null || InputWords == null )
				{
					return;
				}

				int perPage = 10;
				int currentWord = GetCurrentWord();
				int page = (int)(Math.Ceiling( (float) Math.Max(currentWord + 1, 0) / perPage) );
				int currentCharacter = 0;
				int offset = Math.Max(page - 1, 0) * perPage;
				
				for ( int wordIndex = offset ; wordIndex < (offset + perPage); wordIndex++ )
				{
					if ( wordIndex >= TargetWords.Count )
						break;
					
					var wasTyped = false;
					var isCurrentWord = wordIndex == currentWord;
					var targetWord = TargetWords[wordIndex];
					var inputWord = isCurrentWord ? CurrentInput : wordIndex <= InputWords.Count ? InputWords[wordIndex] : "";
					var visibleWord = CombineWords( targetWord ?? "", inputWord ?? "" );
					var cursorPos = inputWord?.Length ?? -1;
					
					for ( int charIndex = 0; charIndex < visibleWord.Length; charIndex++ )
					{
						var targetChar = GetChar( targetWord, charIndex );
						var inputChar = GetChar( inputWord, charIndex );
						var visibleChar = inputChar ?? targetChar ?? '.';

						var colorStyle = "";
						if ( wasTyped )
						{
							colorStyle = "var(--typed);";
						} else if ( charIndex == (cursorPos - (charIndex > targetWord.Length ? 1 : 0) ))
						{
							// is the current position
							colorStyle = Theme.ColorCaret;
						} else if ( targetChar == null && inputChar != null )
						{
							// input went too long, red styling
							colorStyle = Theme.ColorError;
						} else if (targetChar != null && inputChar == null) {
							// not yet typed
							colorStyle = Theme.ColorMain;
						} else if ( targetChar != null && inputChar != null && targetChar != inputChar )
						{
							// character is a typo
							colorStyle = Theme.ColorError;
						} else if ( targetChar != null && inputChar != null && targetChar == inputChar )
						{
							// character is valid
							colorStyle = Theme.ColorTyped;
						}
						
						currentCharacter += 1;
						if ( !(inputChar == ' ' || targetChar == ' ') )
						{
								<label style="color: @colorStyle">@(visibleChar)</label>
						}
					}

					<label>@(" ")</label>
				}
			}
		</div>
	</div>	
</root>

@code {

	public TypingTest Test;
	public TextInput Input;
	public Theme Theme = Theme.Themes["default"];
	private List<string> TargetWords => Test?.TargetWords;
	private List<string> InputWords => Test?.InputWords;
	private string CurrentInput => Input?.Text ?? "";
	
	protected override int BuildHash()
	{
		HashCode code = new HashCode();
		if (TargetWords != null)
			foreach (var word in TargetWords)
				code.Add( word );

		if (InputWords != null)
			foreach (var word in InputWords)
				code.Add( word );

		code.Add( Input?.Text ?? "" );
		code.Add( TargetWords );
		code.Add( InputWords );
		
		return code.ToHashCode();
	}

	public override void Tick()
	{
		base.Tick();
		
		if ( !Input.HasFocus )
		{
			Input.Focus();
		}
	}


	private string CombineWords( string Input, string Target )
	{
		var word = "";
		for ( int i = 0; i < Math.Max( Input.Length, Target.Length ); i++)
		{
			// if index less than input length
			if ( i < Input.Length )
			{
				word += Input[i];
				// if index over input
			} else if ( i >= Input.Length )
			{
				word += Target[i];
			}
		}
		return word;
	}

	private char? GetChar( string text, int index )
	{
		if ( text == null )
		{
			return null;
		}

		if ( index < text.Length )
		{
			return text[index];
		}

		return null;
	}

	private int GetCurrentWord()
	{
		var word = 0;
		if ( InputWords == null ) return 0;
		for ( int i = 0; i < InputWords.Count; i++ )
		{
			if ( InputWords[i] != null )
			{
				word++;
			}
		}
		return word;
	}

	private void HandleTab()
	{
		Input.Text = "";
		Test?.ResetTest();
	}

	private void HandleSpace()
	{
		Input.Text = "";
		Test?.NextWord();
	}

	private void HandleChanged()
	{
		Test?.SetInput( Input.Text ?? "" );
	}

}
