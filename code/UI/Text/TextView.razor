@namespace TerryTyper.UI.Text
@using System
@using System.Collections.Generic
@using Sandbox.Razor
@using Sandbox.UI
@attribute [StyleSheet]
@inherits Panel

<root>
	@{
		int perPage = 10;
		int currentWord = InputTokens.Count;
		int page = (int)(Math.Ceiling( (float)Math.Max( currentWord + 1, 0 ) / perPage ));
		int currentCharacter = 0;
		int offset = Math.Max( page - 1, 0 ) * perPage;

		for ( int wordIndex = offset; wordIndex < (offset + perPage); wordIndex++ )
		{
			if ( wordIndex >= TargetTokens.Count )
				break;

			var wasTyped = false;
			var isCurrentWord = wordIndex == currentWord;
			var targetWord = TargetTokens[wordIndex];
			var inputWord = isCurrentWord ? CurrentInput : wordIndex <= InputTokens.Count ? InputTokens[wordIndex] : "";
			var visibleWord = CombineWords( targetWord ?? "", inputWord ?? "" );
			var cursorPos = inputWord?.Length ?? -1;

			for ( int charIndex = 0; charIndex < visibleWord.Length; charIndex++ )
			{
				var targetChar = GetChar( targetWord, charIndex );
				var inputChar = GetChar( inputWord, charIndex );
				var visibleChar = inputChar ?? targetChar ?? '.';

				var colorStyle = "";
				if ( currentCharacter == (cursorPos - (charIndex > targetWord.Length ? 1 : 0)) )
				{
					// is the current position
					colorStyle = Theme.ColorCaret;
					
				}
				else if ( targetChar == null && inputChar != null )
				{
					// input went too long, red styling
//					colorStyle = Theme.ColorError;
					colorStyle = "red";
				}
				else if ( targetChar != null && inputChar == null )
				{
					// not yet typed
					colorStyle = Theme.ColorMain;
				}
				else if ( targetChar != null && inputChar != null && targetChar != inputChar )
				{
					// character is a typo
					colorStyle = Theme.ColorError;
				}
				else if ( targetChar != null && inputChar != null && targetChar == inputChar )
				{
					// character is valid
					colorStyle = Theme.ColorTyped;
				}

				currentCharacter += 1;
				if ( !(inputChar == ' ' || targetChar == ' ') )
				{
					<label style="color: @colorStyle">@( visibleChar )</label>
				}
			}
			<label>@( " " )</label>
		}
	}
</root>

@code {

	public TextTheme Theme = new();
	public string CurrentInput = "";
	public IList<string> TargetTokens = new List<string>();
	public IList<string> InputTokens = new List<string>();

	public override void Tick()
	{
		base.Tick();
		Style.BackgroundColor = Theme.ColorBackground;
		Style.FontSize = Theme.FontSize;
		Style.FontFamily = Theme.Font;
		StateHasChanged();
	}

	protected override int BuildHash()
	{
		var code = new HashCode();
		foreach (string str in TargetTokens)
		{
			code.Add( str );
		}
		foreach (string str in InputTokens)
		{
			code.Add( str );
		}
		code.Add( CurrentInput );
		code.Add( Theme );
		var res=  code.ToHashCode();
		return res;
	}

	private char? GetChar( string text, int index )
	{
		if ( text == null )
		{
			return null;
		}

		if ( index < text.Length )
		{
			return text[index];
		}

		return null;
	}
	
	private string CombineWords( string Input, string Target )
	{
		var word = "";
		for ( int i = 0; i < Math.Max( Input.Length, Target.Length ); i++)
		{
	// if index less than input length
			if ( i < Input.Length )
			{
				word += Input[i];
	// if index over input
			} else if ( i >= Input.Length )
			{
				word += Target[i];
			}
		}
		return word;
	}

}
