@namespace TerryTyper
@using System
@using System.Collections.Generic
@using System.Linq
@using Sandbox.UI
@attribute [StyleSheet]
@inherits Panel

<root>
	@if ( DebugOverlay )
	{
		<div class="debug-overlay">
			<label>@String.Join( "', '", Input )</label>
			<label>@String.Join( "', '", Target )</label>
			<label>Breaks: @String.Join( "', '", _breaks.Select( e => e.ToString() ) )</label>
		</div>
	}
	@{
		int currentChar = 0;

		for ( int word = _startBreak; word < _endBreak; word++ )
		{
			var isCurrentWord = word == Input.Count;
			var input = isCurrentWord ? CurrentInput : word < Input.Count ? Input[word] : "";
			var target = word < Target.Count ? Target[word] : "";
			var combined = JoinWord( input, target );

			for ( int c = 0; c < combined.Length; c++ )
			{
				string cls = "";

				if ( isCurrentWord && c == input.Length )
				{
					cls += " cursor";
				}
				else if ( c > target.Length )
				{
					// error; we typed too much
					cls += " error";
				}
				else if ( c < target.Length && c < input.Length && input[c] != target[c] )
				{
					// error; typo
					cls += " error";
				}
				else if ( c < target.Length && c < input.Length && input[c] == target[c] )
				{
					cls += " typed";
				}

				<label class="@cls">@combined[c]</label>
				currentChar += 1;
			}

			if ( currentChar == _cursorPos )
			{
				<label>@( "_" )</label>
			}
			else
			{
				<label>@( " " )</label>
			}
			currentChar += 1;
		}
	}
</root>

@code {

	private const int CHARS_PER_ROW = 55;

	private bool DebugOverlay = false;

	public TextTheme Theme { get { return _theme; } set { UpdateTheme(value); } }
	
	public string CurrentInput = "";
	public IList<string> Target = new List<string>();
	public IList<string> Input = new List<string>();
	
	private int _cursorPos => Input.Sum( w => w.Length ) + Input.Count + CurrentInput.Length;
	private TextTheme _theme = TextTheme.DefaultTheme;
	
	// A list of word indexes indicating breakpoints in the word renderer.
	private List<int> _breaks = new(){0};
	private int _startBreak = 0;
	private int _endBreak = 0;

	public override void Tick()
	{
		base.Tick();
		
		BuildBreaks();
		var (startBreak, endBreak) = BreakBounds();
		Log.Info( $"Target: {Target.Count}, Typed: {Input.Count}, Breaks: {String.Join(", ", _breaks.Select( e => e.ToString() ))}" );
		_startBreak = startBreak;
		_endBreak = endBreak;
	}

	protected override void OnAfterTreeRender( bool firstTime )
	{
		base.OnAfterTreeRender( firstTime );
		UpdateTheme( _theme );
	}
	
	protected override int BuildHash()
	{
		var code = new HashCode();
		foreach (string str in Input)
		{
			code.Add( str );
		}
		foreach (string str in Target)
		{
			code.Add( str );
		}
		code.Add( CurrentInput );
		code.Add( _theme?.Name ?? "notheme" );
		code.Add( _startBreak );
		code.Add( _endBreak );
		var res=  code.ToHashCode();
		return res;
	}

	private void UpdateTheme(TextTheme theme)
	{
		if ( _theme != null )
			StyleSheet.Remove( _theme.Stylesheet );

		if ( theme != null )
			StyleSheet.Load( theme.Stylesheet );
		
		_theme = theme;
	}

	private void BuildBreaks()
	{
		// SpaceLeft := LineWidth
		// for each Word in Text
		// if (Width(Word) + SpaceWidth) > SpaceLeft
		// 	insert line break before Word in Text
		//  SpaceLeft := LineWidth - Width(Word)
		// else
		//  SpaceLeft := SpaceLeft - (Width(Word) + SpaceWidth)
		// https://en.wikipedia.org/wiki/Line_wrap_and_word_wrap
		var breaks = new List<int> {0};
		var spaceLeft = CHARS_PER_ROW;
		
		for (int i = 0; i < Target.Count; i++ )
		{
			var word = Target[i];
			if ( word.Length + 1 > spaceLeft )
			{
				breaks.Add(i);
				spaceLeft = CHARS_PER_ROW - word.Length;
			}
			else
			{
				spaceLeft = spaceLeft - (word.Length + 1);
			}
		}
		
		_breaks = breaks;
	}
	
	private (int, int) BreakBounds()
	{
		int breakIndex = 0;
		int currentBreak = 0;
		int endingBreak = 0;
		while ( Input.Count >= _breaks[breakIndex] )
		{
			currentBreak = _breaks[breakIndex];
			endingBreak = (breakIndex + 1) < _breaks.Count ? _breaks[breakIndex + 1] : Target.Count;
			
			breakIndex += 1;
			if ( breakIndex >= _breaks.Count )
				break;
		}

		return (currentBreak,endingBreak);
	}

	private string JoinWord( string input, string target )
	{
		string c = "";
		input ??= "";
		target ??= "";

		var maxLength = Math.Max( input.Length, target.Length );

		for ( int i = 0; i < maxLength; i++ )
		{
			if ( i < input.Length )
				c += input[i];
			else if ( i < target.Length )
				c += target[i];
		}

		return c;
	}

}
