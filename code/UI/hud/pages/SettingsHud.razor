@namespace Sandtype.UI.Hud.Pages
@using System
@using System.Linq
@using Sandbox
@using Sandbox.UI
@using Sandtype.Entity.Pawn
@using Sandtype.Entity.Pawn.data
@using Sandtype.UI.Theme
@attribute [StyleSheet]
@inherits Panel

<root>
	<HudPage @PageName="Settings">
		<Page>
			<div class="settings-header">
				<h1 class="settings-title">Settings</h1>
				<button style="background-color: #eb8484; color: #4d1212;" class="settings-button" @onclick="@( () => { CreateEvent( "onclose" ); })">close</button>
			</div>
			<div class="settings-section">
				<h1>Typing Theme Selection</h1>
				@foreach ( var theme in Theme.Themes.Keys )
				{
					var themeData = Theme.Themes[theme];
					var pawn = Game.LocalClient.Pawn as Pawn;
					<button class="button" style="background-color: @themeData.ColorBackground; color: @themeData.ColorMain" @onclick="@(() => HandleThemeClick( theme ))">@theme@(!IsThemeUnlocked(theme) ? " 🔒" : pawn.Theme.Id == themeData.Id ? " (selected)" : " ")</button>
				}
			</div>
		</Page>
	</HudPage>
</root>

@code {
	
	private Pawn _pawn => (Sandbox.Game.LocalPawn as Pawn);
	private PawnData _pawnData => _pawn?.PawnData;
	private string[] _unlockedThemes => _pawnData?.UnlockedThemes ?? new string[]{};

	private void HandleThemeClick( string theme )
	{
		if ( !IsThemeUnlocked( theme ) )
		{
			return;
		}
		_pawn.Theme = Theme.Themes[theme];
	}

	private bool IsThemeUnlocked( string theme )
	{
		return _unlockedThemes.Contains( theme );
	}

	protected override int BuildHash()
	{
		return HashCode.Combine( (Game.LocalClient.Pawn as Pawn).Theme );
	}

}
