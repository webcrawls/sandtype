@namespace Sandtype.UI.Hud.Pages
@using System
@using System.Linq
@using Sandbox
@using Sandbox.UI
@using Sandtype.Entity.Pawn
@using Sandtype.Entity.Pawn.data
@using Sandtype.UI.Theme
@attribute [StyleSheet]
@inherits Panel

<root>
	<HudPage @PageName="Shop o7">
		<Page>
			<div class="column">
				<div class="section">
					<h1>THE SHOP - Spend your "words typed" here!</h1>
					<h1>Themes: </h1>
					@if ( _themes.Length == _unlockedThemes.Length )
					{
						<h1>you unlocked all the themes. good job.</h1>
					}
					@foreach ( var theme in _themes )
					{
						if ( IsThemeUnlocked( theme ) ) continue;
						var themeData = Theme.Themes[theme];
						var pawn = Game.LocalClient.Pawn as Pawn;
						<button class="button" style="background-color: @themeData.ColorBackground; color: @themeData.ColorMain" @onclick="@(() => HandleThemeClick( theme ))">@theme theme (5wt)</button>
					}
				</div>
			</div>
		</Page>
	</HudPage>
</root>

@code {
	
	private Pawn _pawn => (Sandbox.Game.LocalPawn as Pawn);
	private PawnData _pawnData => _pawn?.PawnData;
	private string[] _themes => Theme.Themes.Keys.ToArray();
	private string[] _unlockedThemes => _pawnData?.UnlockedThemes ?? new string[]{};

	protected override int BuildHash()
	{
		return HashCode.Combine( (Game.LocalClient.Pawn as Pawn).Theme );
	}
	
	private void HandleThemeClick( string theme )
	{
		if ( IsThemeUnlocked( theme ) || _pawn?.PawnData?.WordsTyped < 5 )
		{
			return;
		}

		_pawn.PawnData = _pawn.PawnData.WithUnlockedTheme( theme );
		_pawn.PawnData = _pawn.PawnData.WithWordsTyped( _pawn.PawnData.WordsTyped - 5 );
	}

	private bool IsThemeUnlocked( string theme )
	{
		return _unlockedThemes.Contains( theme );
	}

}
